/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import com.example.openapi.model.DeliveryAcceptOrderRequest;
import com.example.openapi.model.DeliveryDropRequest;
import com.example.openapi.model.Order;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-12T04:08:19.693566868+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "delivery", description = "the delivery API")
public interface DeliveryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /delivery/acceptOrder : Accept Order
     *
     * @param sessionId Session ID of the delivery person (required)
     * @param deliveryAcceptOrderRequest  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deliveryAcceptOrder",
        summary = "Accept Order",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery/acceptOrder",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deliveryAcceptOrder(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "Session ID of the delivery person", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "DeliveryAcceptOrderRequest", description = "") @Valid @RequestBody(required = false) DeliveryAcceptOrderRequest deliveryAcceptOrderRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /delivery/dropOrder : Drop Order
     *
     * @param sessionId Session ID of the delivery person (required)
     * @param deliveryDropRequest  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deliveryDrop",
        summary = "Drop Order",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery/dropOrder",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> deliveryDrop(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "Session ID of the delivery person", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "DeliveryDropRequest", description = "") @Valid @RequestBody(required = false) DeliveryDropRequest deliveryDropRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /delivery/pickupOrder : Pickup Order
     *
     * @param sessionId Session ID of the delivery person (required)
     * @param orderId ID of the order to be picked up (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deliveryPick",
        summary = "Pickup Order",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery/pickupOrder"
    )
    default ResponseEntity<Void> deliveryPick(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "Session ID of the delivery person", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @NotNull @Parameter(name = "orderId", description = "ID of the order to be picked up", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "orderId", required = true) String orderId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/getAcceptedOrders : Get List of Accepted Orders
     *
     * @param sessionId Session ID of the delivery person (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deliveryViewAcceptedOrders",
        summary = "Get List of Accepted Orders",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/getAcceptedOrders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> deliveryViewAcceptedOrders(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "Session ID of the delivery person", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderDetails\" : [ { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 }, { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 } ], \"orderId\" : \"orderId\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupLocation\" : \"pickupLocation\", \"customerName\" : \"customerName\" }, { \"orderDetails\" : [ { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 }, { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 } ], \"orderId\" : \"orderId\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupLocation\" : \"pickupLocation\", \"customerName\" : \"customerName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/viewWaitingOrders : View Waiting Orders
     *
     * @param sessionId Session ID of the delivery person (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deliveryViewWaitingOrders",
        summary = "View Waiting Orders",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/viewWaitingOrders",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Order>> deliveryViewWaitingOrders(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "Session ID of the delivery person", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderDetails\" : [ { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 }, { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 } ], \"orderId\" : \"orderId\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupLocation\" : \"pickupLocation\", \"customerName\" : \"customerName\" }, { \"orderDetails\" : [ { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 }, { \"itemId\" : \"itemId\", \"itemName\" : \"itemName\", \"quantity\" : 0, \"price\" : 6.027456183070403 } ], \"orderId\" : \"orderId\", \"deliveryAddress\" : \"deliveryAddress\", \"pickupLocation\" : \"pickupLocation\", \"customerName\" : \"customerName\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
