/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-12T04:08:19.693566868+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "file", description = "the file API")
public interface FileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /file/{fileId} : Get file by file ID
     * Retrieve a file, typically an image, based on the provided file ID.
     *
     * @param fileId ID of the file to retrieve (required)
     * @param sessionId  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or File Not Found (status code 404)
     */
    @Operation(
        operationId = "getFile",
        summary = "Get file by file ID",
        description = "Retrieve a file, typically an image, based on the provided file ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "image/*", schema = @Schema(implementation = org.springframework.web.multipart.MultipartFile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "File Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/file/{fileId}",
        produces = { "image/*" }
    )
    default ResponseEntity<org.springframework.web.multipart.MultipartFile> getFile(
        @Size(min = 40, max = 40) @Parameter(name = "fileId", description = "ID of the file to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("fileId") String fileId,
        @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = false) String sessionId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /file : Upload a file
     * Upload an image to server for referencing elsewhere.
     *
     * @param sessionId  (required)
     * @param body  (required)
     * @return OK (status code 200)
     *         or Unauthorized (if user not valid to upload file) (status code 401)
     */
    @Operation(
        operationId = "putFile",
        summary = "Upload a file",
        description = "Upload an image to server for referencing elsewhere.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized (if user not valid to upload file)")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/file",
        produces = { "application/json" },
        consumes = { "image/*" }
    )
    default ResponseEntity<String> putFile(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody org.springframework.web.multipart.MultipartFile body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
