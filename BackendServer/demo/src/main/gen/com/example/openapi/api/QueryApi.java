/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import com.example.openapi.model.FoodItem;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-12T04:08:19.693566868+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "query", description = "the query API")
public interface QueryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /query : Search for items
     * Search for items based on search query and filters (Authentication is not necessary)
     *
     * @param sessionId  (required)
     * @param query  (optional)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "query",
        summary = "Search for items",
        description = "Search for items based on search query and filters (Authentication is not necessary)",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodItem.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/query",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FoodItem>> query(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "query", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "query", required = false) String query
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"itemId\" : \"itemId\", \"thumbnail\" : \"thumbnail\", \"ratedBy\" : 1, \"vendor\" : \"vendor\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"rating\" : 6.027456183070403, \"tags\" : [ \"tags\", \"tags\" ] }, { \"itemId\" : \"itemId\", \"thumbnail\" : \"thumbnail\", \"ratedBy\" : 1, \"vendor\" : \"vendor\", \"price\" : 0.8008281904610115, \"name\" : \"name\", \"rating\" : 6.027456183070403, \"tags\" : [ \"tags\", \"tags\" ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
