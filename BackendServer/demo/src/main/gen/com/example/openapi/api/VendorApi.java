/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openapi.api;

import com.example.openapi.model.FoodItemFull;
import com.example.openapi.model.LoginRequest;
import com.example.openapi.model.VendorAddProductRequest;
import com.example.openapi.model.VendorChangeProductAvailabileRequest;
import com.example.openapi.model.VendorDetails;
import com.example.openapi.model.VendorEditProductRequest;
import com.example.openapi.model.VendorGetRequestedOrders200ResponseInner;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-12T04:08:19.693566868+05:30[Asia/Kolkata]")
@Validated
@Tag(name = "vendor", description = "the vendor API")
public interface VendorApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /vendor/login : Login to vendor account
     * Get username and password and authenticate the vendor. Returns sessionId for further requests
     *
     * @param loginRequest  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "loginVendor",
        summary = "Login to vendor account",
        description = "Get username and password and authenticate the vendor. Returns sessionId for further requests",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> loginVendor(
        @Parameter(name = "LoginRequest", description = "", required = true) @Valid @RequestBody LoginRequest loginRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vendor/register : Register a new vendor
     * Create a new vendor account with unique username, strong password for authentication and other vendor info.
     *
     * @param vendorDetails  (required)
     * @return OK (status code 200)
     *         or Conflict (status code 409)
     */
    @Operation(
        operationId = "registerVendor",
        summary = "Register a new vendor",
        description = "Create a new vendor account with unique username, strong password for authentication and other vendor info.",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> registerVendor(
        @Parameter(name = "VendorDetails", description = "", required = true) @Valid @RequestBody VendorDetails vendorDetails
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vendor/product/add
     *
     * @param sessionId  (required)
     * @param vendorAddProductRequest  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorAddProduct",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/product/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<String> vendorAddProduct(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "VendorAddProductRequest", description = "", required = true) @Valid @RequestBody VendorAddProductRequest vendorAddProductRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vendor/changeAvailable
     *
     * @param sessionId  (required)
     * @param vendorChangeProductAvailabileRequest  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorChangeAvailabile",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/changeAvailable",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> vendorChangeAvailabile(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "VendorChangeProductAvailabileRequest", description = "", required = true) @Valid @RequestBody VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vendor/product/changeAvailable
     *
     * @param sessionId  (required)
     * @param vendorChangeProductAvailabileRequest  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorChangeProductAvailabile",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/product/changeAvailable",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> vendorChangeProductAvailabile(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "VendorChangeProductAvailabileRequest", description = "", required = true) @Valid @RequestBody VendorChangeProductAvailabileRequest vendorChangeProductAvailabileRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /vendor/product/edit
     *
     * @param sessionId  (required)
     * @param vendorEditProductRequest  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorEditProduct",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodItemFull.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/vendor/product/edit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<FoodItemFull> vendorEditProduct(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId,
        @Parameter(name = "VendorEditProductRequest", description = "", required = true) @Valid @RequestBody VendorEditProductRequest vendorEditProductRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"itemId\" : \"itemId\", \"isAvailable\" : true, \"itemName\" : \"itemName\", \"thumbnailPicture\" : \"thumbnailPicture\", \"maxQuantity\" : 1, \"price\" : 0.8008281904610115, \"imageUrls\" : [ \"imageUrls\", \"imageUrls\" ], \"vendorName\" : \"vendorName\", \"starRating\" : 6.027456183070403, \"vendorLocation\" : \"vendorLocation\", \"tags\" : [ \"tags\", \"tags\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vendor/order/accepted
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorGetAcceptedOrders",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VendorGetRequestedOrders200ResponseInner.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vendor/order/accepted",
        produces = { "application/json" }
    )
    default ResponseEntity<List<VendorGetRequestedOrders200ResponseInner>> vendorGetAcceptedOrders(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderId\" : \"orderId\", \"price\" : 6.027456183070403, \"vendorID\" : \"vendorID\", \"location\" : \"location\", \"pickupLocation\" : \"pickupLocation\", \"userId\" : \"userId\", \"orderItems\" : [ { \"itemId\" : \"itemId\", \"quantity\" : 0 }, { \"itemId\" : \"itemId\", \"quantity\" : 0 } ] }, { \"orderId\" : \"orderId\", \"price\" : 6.027456183070403, \"vendorID\" : \"vendorID\", \"location\" : \"location\", \"pickupLocation\" : \"pickupLocation\", \"userId\" : \"userId\", \"orderItems\" : [ { \"itemId\" : \"itemId\", \"quantity\" : 0 }, { \"itemId\" : \"itemId\", \"quantity\" : 0 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /vendor/order/requested
     *
     * @param sessionId  (required)
     * @return OK (status code 200)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "vendorGetRequestedOrders",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = VendorGetRequestedOrders200ResponseInner.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/vendor/order/requested",
        produces = { "application/json" }
    )
    default ResponseEntity<List<VendorGetRequestedOrders200ResponseInner>> vendorGetRequestedOrders(
        @NotNull @Size(min = 40, max = 40) @Parameter(name = "sessionId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "sessionId", required = true) String sessionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"orderId\" : \"orderId\", \"price\" : 6.027456183070403, \"vendorID\" : \"vendorID\", \"location\" : \"location\", \"pickupLocation\" : \"pickupLocation\", \"userId\" : \"userId\", \"orderItems\" : [ { \"itemId\" : \"itemId\", \"quantity\" : 0 }, { \"itemId\" : \"itemId\", \"quantity\" : 0 } ] }, { \"orderId\" : \"orderId\", \"price\" : 6.027456183070403, \"vendorID\" : \"vendorID\", \"location\" : \"location\", \"pickupLocation\" : \"pickupLocation\", \"userId\" : \"userId\", \"orderItems\" : [ { \"itemId\" : \"itemId\", \"quantity\" : 0 }, { \"itemId\" : \"itemId\", \"quantity\" : 0 } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
